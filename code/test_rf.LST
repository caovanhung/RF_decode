C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TEST_RF
OBJECT MODULE PLACED IN test_rf.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE test_rf.c BROWSE INCDIR(..\N76E003_BSP_Keil_C51_V1.0.5;..\N76E003_BSP_Keil_
                    -C51_V1.0.5\Include) DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include "N76E003.h"
   2          #include "Common.h"
   3          //#include "Delay.h"
   4          #include "SFR_Macro.h"
   5          #include "Function_define.h"
   6          //#include "intrins.h"
   7          //#include "stdio.h"
   8          //#include "math.h"
   9          
  10          #define time1 30
  11          #define time2 60
  12          #define time3 90
  13          #define time4 120
  14          #define time5 1000
  15          #define time6 6000
  16          #define Flash 200
  17          #define Max_start 2500
  18          
  19          
  20          #define Max_short2 65
  21          #define Min_short2 45
  22          
  23          
  24          #define Min_head2 500
  25          #define Max_head2 600
  26          
  27          #define Max_bit2 3000
  28          
  29          #define Time_1k 1000
  30          #define Time_2k5 2500
  31          #define Time_5k 5000
  32          #define Time_10k 10000
  33          #define Time_20k 20000
  34          #define Time_50k 50000
  35          #define ADDR_base 0x109A
  36          #define LINE_1 0X80
  37          #define LINE_2 0XC0
  38          
  39          
  40          #define Max_time_kiem_tra 1000
  41          #define Min_time_kiem_tra 150
  42          
  43          sbit LCD_RS = P1^4;
  44          sbit LCD_RW = P1^3;
  45          sbit LCD_E = P1^2;
  46          sbit LCD_D4 = P1^1;
  47          sbit LCD_D5 = P1^0;
  48          sbit LCD_D6 = P0^0;
  49          sbit LCD_D7 = P0^1;
  50          sbit SPEAKER = P0^6;
  51          sbit RF  = P0^5;
  52          
  53          unsigned char da1527[2][3];
  54          unsigned char decode_ok=0,bedside=0;  
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 2   

  55          unsigned int short_k=0;
  56          unsigned char data_rf[3];
  57          long  num;
  58          int g;
  59          unsigned char dat[3]={0x1e,0xc5,0x2d};
  60          unsigned char line[] = {0x00,0x80,0xc0};
  61          unsigned int i_high=0,i_low=0;
  62          void Delay_RF(unsigned long int u32CNT)
  63          {
  64   1          clr_T1M;                                    //T0M=0, Timer0 Clock = Fsys/12
  65   1          TMOD = 0x12;                              //Timer1 is 16-bit mode
  66   1          TR1=1;                                    //Start Timer1
  67   1          while (u32CNT != 0)
  68   1          {
  69   2              TL1 = LOBYTE(65535-12); //Find  define in "Function_define.h" "TIMER VALUE"
  70   2              TH1 = HIBYTE(65535-12);
  71   2              while (TF1 != 1);                       //Check Timer1 Time-Out Flag
  72   2              TF1=0;
  73   2              u32CNT --;
  74   2          }
  75   1          TR1=0;                                    //Stop Timer1
  76   1      }
  77          
  78            
  79          void delay_ms(unsigned int Time)
  80          {
  81   1         unsigned int i,j,t;
  82   1         t=Time;
  83   1         for(i=0;i<t;i++)
  84   1         {
  85   2            for(j=0;j<125;j++);
  86   2         }
  87   1      }
  88          void delay_us(unsigned int Time)
  89          {
  90   1         unsigned int i,j;
  91   1         for(i=0;i<Time;i++)
  92   1         {
  93   2            for(j=0;j<2;j++);
  94   2         }
  95   1      }
  96          //unsigned char check_bedside()
  97          //{
  98          //   unsigned int k,cnt=0;
  99          //   unsigned int xdata head_k=0;   
 100          //   short_k=0;
 101          //   while(!RF){}; 
 102          //    for(k=0;k<10;k++)
 103          //   {     
 104          //     while((RF) && (short_k<Max_short2))    
 105          //       {
 106          //        Delay_RF(1);
 107          //          short_k++;
 108          //       }
 109          //      head_k=0; 
 110          //     while((!RF) && (head_k<Max_short2))
 111          //         {
 112          //          Delay_RF(1);
 113          //          head_k++; 
 114          //         }
 115          //     
 116          //        if (((short_k>=Min_check_time)&&(short_k<=Max_check_time) )&& (Min_check_time<=head_k) && (head_
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 3   

             -k<=Max_check_time))
 117          //         //if(short_k
 118          //         {
 119          //       cnt++; 
 120          //         }   
 121          //     }
 122          //if (cnt>0) return 1;
 123          //else return 0;
 124          //}
 125          
 126          unsigned char Get_Kiemtra_loai()
 127          {
 128   1        int kk=5,ff=0;
 129   1         while(kk--)
 130   1         {
 131   2           i_high=0;
 132   2           while(!RF);
 133   2           while(RF && (i_high< Max_time_kiem_tra))
 134   2           {
 135   3            i_high++;
 136   3            delay_us(1);         
 137   3           }
 138   2           i_low=0;
 139   2           while(!RF && (i_low< Max_time_kiem_tra))
 140   2           {
 141   3            i_low++;
 142   3            delay_us(1);         
 143   3           }  
 144   2         if((i_high>Min_time_kiem_tra) && (i_high<Max_time_kiem_tra)  && (i_low> Min_time_kiem_tra) && (i_low< M
             -ax_time_kiem_tra)) ff++;
 145   2          }
 146   1         if(ff>3)  return 0;
 147   1          else return 1;
 148   1      } 
 149          void RF_decode(void)
 150          {
 151   1            unsigned char ii,k,rep;
 152   1            unsigned int xung;
 153   1            unsigned int xdata head_k=0; 
 154   1            short_k=0;
 155   1           while(!RF){}; 
 156   1           while((RF) && (short_k<Max_short2))    
 157   1             {
 158   2              Delay_RF(1);
 159   2                short_k++;
 160   2             }
 161   1            head_k=0; 
 162   1           while(!RF)
 163   1               {
 164   2                Delay_RF(1);
 165   2                head_k++; 
 166   2               }
 167   1       
 168   1       if (((short_k>=Min_short2)&&(short_k<=Max_short2) )&& (Min_head2<=head_k) && (head_k<=Max_head2))
 169   1            
 170   1              {
 171   2             //  SPEAKER=0;
 172   2                  for(rep=0;rep<2;rep++)    
 173   2                     {  
 174   3                       for(ii=0;ii<3;ii++)
 175   3                         {
 176   4                          for(k=0;k<8;k++)
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 4   

 177   4                             {                       
 178   5                            xung=0;
 179   5                          while((RF) && (xung<Max_bit2)) 
 180   5                              {
 181   6                                 Delay_RF(1);
 182   6                                 xung++;
 183   6                              }// 
 184   5                              
 185   5                                 if((short_k<(xung*2) &&(short_k>(xung/2))))
 186   5                              {
 187   6                                // da1527[rep][ii]|=(1<<(7-k));
 188   6                                da1527[rep][ii]&=~(1<<((7-k)));
 189   6                                // SPEAKER=~SPEAKER;
 190   6                              }                               
 191   5                                     else if(xung<=(short_k/2)&&(xung>0))
 192   5                                     
 193   5                                     {
 194   6                                       //da1527[rep][ii]&=~(1<<((7-k)));
 195   6                                     da1527[rep][ii]|=(1<<(7-k));
 196   6                                     //SPEAKER=~SPEAKER;
 197   6                                     }
 198   5                                       else {return;}  
 199   5                                  
 200   5                                 
 201   5                          while(!RF) {};                     
 202   5                         }
 203   4                        }  
 204   3                      while(RF){Delay_RF(1);} ;                     
 205   3                      head_k=0;while(!RF) {Delay_RF(1);head_k++;}  
 206   3                      if((Min_head2>head_k) || (head_k>Max_head2) ) {return; }
 207   3                       } 
 208   2                  //+++++++++++++++++++++++++bien doi code++++++++++++++++++++++++++++++++++++++++  
 209   2                 if((da1527[0][0]==0xff) && (da1527[0][1]==0xff) && (da1527[0][2]==0xff))
 210   2                  {
 211   3                  return;
 212   3                  }
 213   2                  
 214   2                  if((da1527[0][0]==da1527[1][0]) && (da1527[0][1]==da1527[1][1]) && (da1527[0][2]==da1527[1][2]
             -))   
 215   2                       {
 216   3      //                 data_rf[0] = da1527[0];
 217   3      //                 data_rf[1] = da1527[1];
 218   3      //                 data_rf[2] = da1527[2];
 219   3      
 220   3                       decode_ok=1;
 221   3                      
 222   3                       }
 223   2                  else return;
 224   2       }           
 225   1      
 226   1      
 227   1      else return;
 228   1      
 229   1      
 230   1      }
 231          
 232           void lcd1602_enable(void)
 233          {
 234   1         LCD_E=1;   
 235   1         delay_us(3);       
 236   1         LCD_E=0;
 237   1         delay_us(5);   
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 5   

 238   1      }
 239          // --------------------------------------------------
 240          // Ham Gui 4 Bit Du Lieu Ra LCD
 241           void lcd1602_send_4bit_data ( unsigned char cX )
 242          {
 243   1       LCD_D4 = cX & 0x01; 
 244   1       LCD_D5 = (cX>>1)&1;
 245   1       LCD_D6 = (cX>>2)&1;
 246   1       LCD_D7 = (cX>>3)&1;
 247   1      }
 248          
 249          // --------------------------------------------------
 250          // Ham Gui 1 Lenh Cho LCD
 251           void lcd1602_send_command (unsigned char cX )
 252          {
 253   1         delay_us(800);
 254   1         lcd1602_send_4bit_data  ( cX >>4 );       // send 4 bit high  
 255   1         lcd1602_enable() ;
 256   1         lcd1602_send_4bit_data ( cX  );                // send 4 bit low  
 257   1         lcd1602_enable() ;
 258   1      }
 259          
 260          // --------------------------------------------------
 261          // Ham Khoi Tao LCD
 262           void lcd_init ( void )
 263          {
 264   1         lcd1602_send_4bit_data ( 0x00 );
 265   1         delay_ms(200);
 266   1         
 267   1         LCD_RS=0;   
 268   1         LCD_RW=0;
 269   1         LCD_E=0;                                                   // che do gui lenh
 270   1         
 271   1         lcd1602_send_4bit_data ( 0x03 );          // ket noi 8 bit
 272   1         lcd1602_enable() ;
 273   1         lcd1602_enable () ;
 274   1         lcd1602_enable () ;
 275   1         lcd1602_send_4bit_data ( 0x02 );               // ket noi 4 bit
 276   1         lcd1602_enable() ;
 277   1         
 278   1         lcd1602_send_command( 0x2C );                 // giao thuc 4 bit, hien thi 2 hang, ki tu 5x8
 279   1         lcd1602_send_command( 0x80);
 280   1         lcd1602_send_command( 0x0C);                      // cho phep hien thi man hinh
 281   1         lcd1602_send_command( 0x06 );                  // tang ID, khong dich khung hinh
 282   1         lcd1602_send_command( 0X01 );         // xoa toan bo khung hinh
 283   1      }
 284          
 285          // --------------------------------------------------
 286          // Ham Thiet Lap Vi Tri Con Tro
 287          void lcd_gotoxy(unsigned char x, unsigned char y)
 288          {
 289   1        unsigned char address;
 290   1        if(!y)
 291   1        address = (LINE_1+x);
 292   1        else
 293   1        address = (LINE_2+x);
 294   1        delay_ms(3);
 295   1        lcd1602_send_command(address);
 296   1        delay_ms(1);
 297   1      }
 298          
 299          // --------------------------------------------------
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 6   

 300          // Ham Xoa Man Hinh LCD
 301          void lcd_clear(void)
 302          {
 303   1         lcd1602_send_command( 0X01 );  
 304   1        delay_us(300);
 305   1      }
 306          
 307          // --------------------------------------------------
 308          // Ham Gui 1 Ky Tu Len LCD
 309           void lcd_putchar ( unsigned int cX )
 310          {
 311   1         LCD_RS=1;   
 312   1         lcd1602_send_command( cX );
 313   1        LCD_RS=0;
 314   1      }
 315          
 316          // --------------------------------------------------
 317          // Ham Gui 1 Chuoi Ky Tu Len LCD
 318          void lcd_puts(char *s)
 319          {
 320   1         while (*s)
 321   1         {
 322   2               lcd_putchar(*s);
 323   2            s++;
 324   2         }
 325   1      }
 326          
 327          void lcd_puts_seri(unsigned long int seri ,char h ,char c)
 328              {
 329   1          unsigned char trieu,tramnghin,chucnghin,nghin,tram,chuc,donvi; 
 330   1          trieu=seri/1000000;
 331   1          tramnghin=(seri%1000000)/100000;
 332   1          chucnghin=((seri%1000000)%100000)/10000;
 333   1          nghin=((((seri%1000000)%100000))%10000)/1000;
 334   1          tram =(((((seri%1000000)%100000))%10000)%1000)/100;
 335   1          chuc =((((((seri%1000000)%100000))%10000)%1000)%100)/10;
 336   1          donvi=seri%10;   
 337   1          if(seri==0)
 338   1          {
 339   2              lcd_gotoxy(c,h-5);
 340   2              lcd_putchar('[');
 341   2              lcd_putchar('-');
 342   2              lcd_putchar('-'); 
 343   2              lcd_putchar('-');
 344   2              lcd_putchar('-'); 
 345   2              lcd_putchar('-');  
 346   2              lcd_putchar('-');
 347   2              lcd_putchar('-'); 
 348   2              lcd_putchar(']');    
 349   2          }
 350   1              else     
 351   1              
 352   1              {   
 353   2                      lcd_gotoxy(c,h-5);
 354   2                      lcd_putchar('[');
 355   2                      if(seri>1000000)
 356   2                      {
 357   3                      lcd_putchar(trieu+48);
 358   3                      }                 
 359   2                       if(seri>100000)
 360   2                      {
 361   3                      lcd_putchar(tramnghin+48);
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 7   

 362   3                      } 
 363   2                      if(seri>10000)
 364   2                      {
 365   3                      lcd_putchar(chucnghin+48); 
 366   3                      }
 367   2                        if(seri>1000)
 368   2                      {
 369   3                      lcd_putchar(nghin+48); 
 370   3                      }
 371   2                        if(seri>100)
 372   2                      {                
 373   3                      lcd_putchar(tram+48);
 374   3                      }  
 375   2                        if(seri>10)
 376   2                      {                
 377   3                      lcd_putchar(chuc+48);
 378   3                      }
 379   2                      lcd_putchar(donvi+48);
 380   2                      //lcd_gotoxy(c,h);
 381   2                      lcd_putchar(']');
 382   2      
 383   2               }
 384   1          }
 385          void main (void)
 386          {
 387   1       
 388   1      
 389   1       CKSWT = 0x10;
 390   1       CKEN  = 0x21;
 391   1        
 392   1       P1M1  = 0x00;
 393   1       P1M2  = 0x1F;
 394   1      // P1M1  = 0x00;
 395   1      // P1M2  = 0x00;
 396   1       P0M1  = 0x20;
 397   1       P0M2  = 0x43;
 398   1       P3M1 = 0x00;
 399   1       P3M2 = 0x00;
 400   1        
 401   1       TMOD = 0x12; 
 402   1      // TL0=TH0 = 0xc8; 
 403   1       
 404   1        EA=1;
 405   1      //  ET0=1;
 406   1        //TR0=1;
 407   1        SPEAKER=0;
 408   1       delay_ms(4);
 409   1      lcd_init(); 
 410   1      lcd_clear();  
 411   1        lcd_gotoxy(2,0);
 412   1        lcd_puts("KIEM TRA SONG");
 413   1        lcd_gotoxy(2,1);
 414   1        lcd_puts("plese wait...!");
 415   1        delay_ms(10000);
 416   1        lcd_clear();
 417   1        lcd_gotoxy(2,0);
 418   1        lcd_puts("DANG DOC MA...");
 419   1      //  while(1)
 420   1      //    
 421   1      //  {
 422   1      //  SPEAKER=Get_Kiemtra_loai();
 423   1      //  }
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 8   

 424   1          
 425   1        while(1)
 426   1      {
 427   2        
 428   2        RF_decode();
 429   2        //check_bedside();
 430   2         if(decode_ok==1)
 431   2          {
 432   3            SPEAKER=1;
 433   3            g=0;
 434   3            while(g<20)
 435   3              {
 436   4               if(!Get_Kiemtra_loai()) bedside=1;
 437   4               g++;
 438   4              }
 439   3            lcd_gotoxy(2,0);
 440   3            lcd_puts("PHAT HIEN MA");
 441   3            SPEAKER=1;
 442   3            delay_ms(1000);
 443   3            SPEAKER=0;
 444   3            delay_ms(1000);
 445   3            SPEAKER=1;
 446   3            delay_ms(1000);
 447   3            SPEAKER=0;
 448   3          
 449   3            
 450   3            if(bedside==1)
 451   3              {
 452   4            num=0;
 453   4            num= (num<<8) + da1527[0][2];
 454   4            num= (num<<8) + da1527[0][1];
 455   4            num=num+10000;
 456   4            lcd_puts_seri(num,2,1);
 457   4            lcd_gotoxy(9,1);
 458   4            lcd_puts("PHIM ");
 459   4            lcd_putchar(da1527[0][0]);
 460   4                      
 461   4              }
 462   3            else  
 463   3            {
 464   4            num=0;
 465   4            num= (num<<8) + da1527[0][2];
 466   4            num= (num<<8) + da1527[0][1];
 467   4            num= (num<<8) + da1527[0][0];
 468   4            lcd_gotoxy(2,1);
 469   4            lcd_puts_seri(num,2,4);
 470   4      
 471   4            }
 472   3            da1527[0][0]=0;
 473   3            da1527[0][1]=0;
 474   3            da1527[0][2]=0;
 475   3            bedside=0;
 476   3            decode_ok=0;
 477   3          }
 478   2      
 479   2      
 480   2      
 481   2      }
 482   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
C51 COMPILER V9.52.0.0   TEST_RF                                                           11/29/2018 14:26:33 PAGE 9   

   CODE SIZE        =   2201    ----
   CONSTANT SIZE    =     63    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     29      28
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
